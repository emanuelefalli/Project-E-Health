import json
from pprint import pprint

import dash
import pandas as pd
from dash import dcc
from dash import html
from dash.dependencies import Input, Output
import dash_bootstrap_components as dbc

#external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']

app = dash.Dash(__name__, external_stylesheets=[dbc.themes.FLATLY])

DB = pd.read_excel('DATABASE.xlsx')
ARTICOLI = pd.read_excel('DB_ARTICOLI.xlsx')

df_DB = pd.DataFrame(DB)
df_ARTICOLI= pd.DataFrame(ARTICOLI)


array = ['Medical', 'Education', 'Game Puzzle', 'Game Educational']
apps = list()
id_art = list()
articles = list()
val_list = list()
'''
app.layout = html.Div([
    dcc.Dropdown(
    id='seleziona categoria',
    options=[
        {'label': x, 'value': x}
        for x in array
        ],
    value='value'
    ),
    html.Div(id='categoria')
])

#app.layout = html.Div([
#layout1,
#layout2,
#layout3
#])

@app.callback(
    Output('categoria', 'children'),
    Input('seleziona categoria', 'value')
)

def update_output(value):
    app_output = list()
    #print(value)
    if value == 'Medical':
        app_output = df_medical['title']
    if value == 'Education':
        for i in range(len(df_education)):
            app_output.append(df_education.iloc[i]['title'] + '\n')
    if value == 'Medical':
        app_output = df_medical['title']
    return app_output
    #return 'You have selected "{}"'.format(value)

if __name__ == '__main__':
    app.run_server(debug=True)
'''
'''
all_categories = {
    'Medical': medical_app,
    'Education': education_app,
    'Puzzle': puzzle_app,
    'Educational': educational_app,
}

all_articles = {
    'Medical': medical_app_articles,
    'Education': education_app_articles,
    'Puzzle' :  puzzle_app_articles,
    'Educational' : educational_app_articles}
#
#all_validation = [medical_app_articles_validation,
 #                 education_app_articles_validation,
  #                puzzle_app_articles_validation,
   #               educational_app_articles_validation]
'''
#pprint(all_validation)
'''
app.layout = html.Div([
    dcc.Dropdown(#RadioItems(
        id='categories',
        options=[{'label': k, 'value': k} for k in df_DB['category'].unique()]#,
        #value='Medical'
    ),

    html.Hr(),

    dcc.Dropdown(#RadioItems(
        id='app',
        options=[]
    ),

    html.Hr(),

    dcc.Dropdown(#RadioItems(
        id='articles',
        options=[]
        #options=[{'label': k, 'value': k} for k in all_articles],
        #value=all_articles[0].keys()
    ),

    html.Hr(),

    html.Div(id='display information')
])
'''

import plotly.express as px

'''
app.layout = html.Div([
    html.H1(children=[html.Label('Select a category'),
    dcc.Dropdown(#RadioItems(
        id='categories',
        options=[{'label': k, 'value': k} for k in df_DB['category'].unique()])]#,
        #value='Medical'
    dcc.Graph(
        id='graph article',
        figure={})),

    html.Hr(),

    html.Div(children=[html.Label('Select an app'),
    dcc.Dropdown(#RadioItems(
        id='app',
        options=[]
    )]),

    html.Hr(),

    html.Div(children=[html.Label('Select an article'),
    dcc.Dropdown(#RadioItems(
        id='articles',
        options=[]
        #options=[{'label': k, 'value': k} for k in all_articles],
        #value=all_articles[0].keys()
    )]),

    html.Hr(),

    html.Div(id='display information')
])

row = html.Div(
    [
        dbc.Row(dbc.Col( width=6)),
        dbc.Row(dbc.Col( width=6)
        ),
        dbc.Row(
            [
                dbc.Col( width=3),
                #dbc.Col(),
                #dbc.Col( width=3),
            ]
        ),
    ]
)
'''

app.layout = html.Div([html.H1("DASHBOARD"),
    html.Div(children=[html.Label('Select a category'),
    dcc.Dropdown(#RadioItems(
        id='categories',
        options=[{'label': k, 'value': k} for k in sorted(df_DB['category'].unique())]),#,df_DB['category'].unique()
        #value='Medical'
    #style={'padding': 10, 'flex': 1},
    dcc.Graph(
        id='graph article',
        figure={})]),

    html.Hr(),

    html.Div(children=[html.Label('Select an app'),
    dcc.Dropdown(#RadioItems(
        id='app',
        options=[]
    )]),

    html.Hr(),

    html.Div(id='display app'),

    html.Hr(),

    html.Div(dcc.Graph(
        id='graph validation',
        figure={}),
    ),
    html.Hr(),

    html.Div(children=[html.Label('Select an article'),
    dcc.Dropdown(#RadioItems(
        id='articles',
        options=[]
        #options=[{'label': k, 'value': k} for k in all_articles],
        #value=all_articles[0].keys()
    ),
    ]),

    html.Hr(),

    html.Div(id='display information article')

])

@app.callback(
    Output('graph article', 'figure'),
    Input('categories','value'))
def interactive(sel_cat):
    dff = df_DB[df_DB['category'] == sel_cat]#dff = df_DB[df_DB['category'] == sel_cat]
    fig = px.bar(dff, x='title', y=["#obs", "#rct", "#sys", "#meta"])#, text='pop')#color=validation') #fig = px.bar(dff, x='title', y='#art')
    return fig


@app.callback(
    Output('app', 'options'),
    Input('categories', 'value'))
def set_category(selected_category):
    apps.clear()
    dff = df_DB[df_DB['category'] == selected_category]
    return [{'label': i, 'value': i} for i in dff['title'].unique()]

@app.callback(
    Output('display app', 'children'),
    Input('app','value'))
def info_app(selected_app):
    #df1 = df_DB[df_DB['title'] == selected_app]
    dff = df_DB[df_DB['title'] == selected_app]
    return u'TITLE: {} \n' \
           u'CATEGORY: {} \n' \
           u'SCORE: {} \n' \
           u'REVIEWS: {} \n' \
           u'INSTALLS: {} \n' \
           u'URL: {}\n' .format(
        dff['title'].values[0],
        dff['category'].values[0],
        dff['score'].values[0],
        dff['reviews'].values[0],
        dff['installs'].values[0],
        dff['url'].values[0]
    )

'''
return u'TITLE: {}\r\n' \
       u'CATEGORY: {}\r\n' \
       u'INSTALLS: {}\r\n' \
       u'REVIEW: {}\r\n' \
       u'SCORE: {}\r\n' \
       u'URL: {}\r\n'.format(
    df1['title'].unique(),
    df1['category'].unique(),
    df1['installs'].unique(),
    df1['review'].unique(),
    df1['score'].unique(),
    df1['url'].unique()
)
'''


@app.callback(
    Output('articles', 'options'),
    Input('app', 'value'))
def set_app(selected_app):
    articles.clear()
    dff = df_ARTICOLI[df_ARTICOLI['title app'] == selected_app]
    return [{'label': i, 'value': i} for i in dff['title'].unique()]

    '''
    for k in range(len(df_DB)):
        if df_DB['title'].values[k] == selected_app:
            n_art = df_DB['#art'].values[k]
            for j in range(n_art):
                id = df_DB['articolo' + str(j+1)].values[k]
                for z in range(len(df_ARTICOLI)):
                    if df_ARTICOLI['id'].values[z] == id:
                        articles.append(df_ARTICOLI['title'].values[z])
    return [{'label': i, 'value': i} for i in articles]
'''

@app.callback(
    Output('graph validation', 'figure'),
    Input('app','value'))
def interactive(sel_app):
    dff = df_ARTICOLI[df_ARTICOLI['title app'] == sel_app]
    fig_val = px.pie(dff, names='validation')
    return fig_val

    #dff = df_DB[df_DB['title'] == sel_app]
    #fig_val = px.pie(dff, labels=["#meta", "#sys", "#rct", "#obs"], textinfo='label+percent')
    #return fig_val



@app.callback(
    Output('display information article', 'children'),
    Input('articles', 'value'))
def display_validation(selected_article):
    dff = df_ARTICOLI[df_ARTICOLI['title'] == selected_article]
    return u'TITLE: {}\r\n' \
           u'ID: {}\r\n' \
           u'JOURNAL: {}\r\n' \
           u'PUBLICATION DATE: {}\r\n' \
           u'VALIDATION: {}\r\n'.format(
        dff['title'].unique(),
        dff['id'].unique(),
        dff['journal'].unique(),
        dff['publication date'].unique(),
        dff['validation'].unique()
    )

    '''
    for j in range(len(df_ARTICOLI)):
        if df_ARTICOLI['title'].values[j] == selected_article:
            pos = j
    return u'TITLE: {}\r\n' \
           u'ID: {}\r\n' \
           u'JOURNAL: {}\r\n' \
           u'PUBLICATION DATE: {}\r\n' \
           u'VALIDATION: {}\r\n'.format(
        df_ARTICOLI['title'].values[pos],
        df_ARTICOLI['id'].values[pos],
        df_ARTICOLI['publication date'].values[pos],
        df_ARTICOLI['journal'].values[pos],
        df_ARTICOLI['validation'].values[pos]
    )
'''
if __name__ == '__main__':
    app.run_server()